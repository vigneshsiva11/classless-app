"use client";

import React from "react";
import { Card, CardContent } from "./ui/card";

interface GeneratedImageProps {
  imageData: string;
  mimeType: string;
  prompt: string;
  className?: string;
}

export function GeneratedImage({
  imageData,
  mimeType,
  prompt,
  className,
}: GeneratedImageProps) {
  const [isLoading, setIsLoading] = React.useState(true);
  const [hasError, setHasError] = React.useState(false);

  const handleImageLoad = () => {
    setIsLoading(false);
  };

  const handleImageError = () => {
    setIsLoading(false);
    setHasError(true);
  };

  // Handle different image formats
  const getImageSrc = () => {
    if (imageData.startsWith("data:")) {
      return imageData;
    }
    return `data:${mimeType};base64,${imageData}`;
  };

  return (
    <Card className={`w-full max-w-2xl mx-auto ${className}`}>
      <CardContent className="p-4">
        <div className="space-y-3">
          <div className="text-sm text-muted-foreground">
            Generated image for: "{prompt}"
          </div>

          <div className="relative bg-gray-100 rounded-lg overflow-hidden">
            {isLoading && (
              <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                  <span className="text-sm text-muted-foreground">
                    Loading image...
                  </span>
                </div>
              </div>
            )}

            {hasError ? (
              <div className="flex items-center justify-center h-64 bg-gray-100 text-gray-500">
                <div className="text-center">
                  <div className="text-4xl mb-2">üñºÔ∏è</div>
                  <div className="text-sm">Failed to load image</div>
                </div>
              </div>
            ) : (
              <img
                src={getImageSrc()}
                alt={`Generated image: ${prompt}`}
                className="w-full h-auto max-h-96 object-contain"
                onLoad={handleImageLoad}
                onError={handleImageError}
                style={{ display: isLoading ? "none" : "block" }}
              />
            )}
          </div>

          <div className="flex items-center justify-between text-xs text-muted-foreground">
            <span>Generated by Gemini AI</span>
            <span>Click to download</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// Component for displaying image generation responses
interface ImageGenerationResponseProps {
  response: {
    answer: string;
    generatedImage?: {
      data: string;
      mimeType: string;
    };
    isImageGeneration?: boolean;
    followUpQuestions?: string[];
  };
  prompt: string;
}

export function ImageGenerationResponse({
  response,
  prompt,
}: ImageGenerationResponseProps) {
  return (
    <div className="space-y-4">
      {/* Text response */}
      <div className="prose prose-sm max-w-none">
        <p>{response.answer}</p>
      </div>

      {/* Generated image */}
      {response.generatedImage && (
        <GeneratedImage
          imageData={response.generatedImage.data}
          mimeType={response.generatedImage.mimeType}
          prompt={prompt}
        />
      )}

      {/* Follow-up questions */}
      {response.followUpQuestions && response.followUpQuestions.length > 0 && (
        <div className="space-y-2">
          <div className="text-sm font-medium text-muted-foreground">
            Follow-up questions:
          </div>
          <div className="space-y-1">
            {response.followUpQuestions.map((question, index) => (
              <div key={index} className="text-sm text-muted-foreground">
                ‚Ä¢ {question}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
